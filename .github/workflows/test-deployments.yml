name: Test Deployments
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# cancel older, redundant runs of same workflow on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  build-linux-packages:
    name: ${{ matrix.package_name }} ${{ matrix.arch.gox }} ${{ matrix.packager }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package_name:
          - openziti
          - openziti-controller
          - openziti-router
        arch:
          - goreleaser: amd64
            gox: amd64
            deb: amd64
            rpm: x86_64
        packager:
          - rpm
          - deb
    steps:
      - name: Shallow checkout
        uses: actions/checkout@v4

      - name: Install Go
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod

      - name: Build ziti executable
        shell: bash
        run: |
          mkdir -pv ${GITHUB_WORKSPACE}/release/
          go build -o ${GITHUB_WORKSPACE}/release/ ${GITHUB_WORKSPACE}/...

      - name: Build Package
        id: nfpm
        uses: burningalchemist/action-gh-nfpm@eeac96f42da23d091eec0d0088bf05cac0ceb9f3
        with:
          nfpm_version: "2.38.0"
          packager: ${{ matrix.packager }}
          config: dist/dist-packages/linux/nfpm-${{ matrix.package_name }}.yaml
          target: release/

      - name: Upload Package to Build Summary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package_name }}-${{ matrix.arch.gox }}-${{ matrix.packager }}
          path: ./release/${{ matrix.package_name }}*.${{ matrix.packager }}
          if-no-files-found: error

  install-linux-packages:
    needs: build-linux-packages
    name: ${{ format('{0}:{1}', matrix.distro.name, matrix.distro.version) }} ${{ matrix.arch.gox }}
    runs-on: ubuntu-latest
    # iterate over an assortment of popular distribution images from the docker.io/library of vetted images
    container:
      image: docker.io/library/${{ format('{0}:{1}', matrix.distro.name, matrix.distro.version) }}
      options: --user 0:0
    strategy:
      matrix:
        distro:
          - name: ubuntu
            version: "24.04"
            org:
            type: deb
          - name: ubuntu
            version: "22.04"
            type: deb
          - name: ubuntu
            version: "20.04"
            type: deb
          - name: fedora
            version: "35"
            type: rpm
          - name: rockylinux
            version: "9"
            type: rpm
        arch:
          - goreleaser: amd64
            gox: amd64
            deb: amd64
            rpm: x86_64
    env:
      ZITI_PWD: ziggypw
      ZITI_CTRL_ADVERTISED_ADDRESS: linux-controller.127.21.71.0.sslip.io
      ZITI_CTRL_ADVERTISED_PORT: 12800
      ZITI_ROUTER_ADVERTISED_ADDRESS: linux-router.127.21.71.0.sslip.io
      ZITI_ROUTER_PORT: 30222
      # ZITI_ROUTER_NAME: linux-router

    steps:
      - name: Download Linux Release Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ matrix.arch.gox }}-${{ matrix.distro.type }}"
          merge-multiple: true
          path: release/

      - name: Install Package
        shell: bash
        run: |
          set -x
          ls -lR ./release/
          case "${{ matrix.distro.type }}" in
            rpm)
              yum install -y ./release/*.${{ matrix.distro.type }}
              ;;
            deb)
              apt install -y ./release/*.${{ matrix.distro.type }}
              ;;
          esac

  docker-deployments:
    name: Test the Docker Deployments
    runs-on: ubuntu-latest
    env:
      ZIGGY_UID: 1001  # let container EUID run-as GHA "runner" user to share cache, etc.
    steps:
      - name: Shallow checkout
        uses: actions/checkout@v4

      - name: Install Go
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod

      - name: Run the Compose Test Script
        shell: bash
        run: dist/docker-images/ziti-controller/compose.test.bash
        env:
          ZITI_GO_VERSION: ${{ steps.setup-go.outputs.go-version }}
